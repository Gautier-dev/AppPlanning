auth:
  ## @param auth.enablePostgresUser Assign a password to the "postgres" admin user. Otherwise, remote access will be blocked for this user
  ##
  enablePostgresUser: true
  ## @param auth.username Name for a custom user to create
  ##
  username: "gautier"
  ## @param auth.database Name for a custom database to create
  ##
  database: "appplanning"
  existingSecret: "postgres-secrets"
  ## @param auth.secretKeys.adminPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  ## @param auth.secretKeys.userPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  ## @param auth.secretKeys.replicationPasswordKey Name of key in existing secret to use for PostgreSQL credentials. Only used when `auth.existingSecret` is set.
  ##
  secretKeys:
    adminPasswordKey: postgres-password
    userPasswordKey: password

primary:
  initdb:
    scripts:
      init_tables_script.sql: |
        \c appplanning;
        CREATE TABLE IF NOT EXISTS plannings (
          planning_id varchar(255) PRIMARY KEY,
          planning_password varchar(255)
        );

        CREATE TABLE IF NOT EXISTS RegisteredPersons (
          Id SERIAL PRIMARY KEY,
          Name varchar(255),
          MorningOrAfternoon varchar(255),
          Weekday varchar(255),
          dayNumber integer,
          planning_id varchar(255) references plannings(planning_id)
        );

        CREATE TABLE IF NOT EXISTS Activities (
          name varchar(255),
          halfday varchar(255),
          day varchar(255),
          dayNumber integer,
          planning_id varchar(255) references plannings(planning_id)
        );
